name: Clean Illegal Filenames and Commit

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Optional: You could also trigger this on push if you want automatic cleanup:
  # push:
  #   branches: [ main ]

jobs:
  clean_filenames:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Required for git push to work correctly; fetches the branch
          fetch-depth: 0 
          # Ensure token is used for authentication when pushing
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename Files with Illegal Characters
        id: rename
        run: |
          # Define a set of illegal characters
          ILLEGAL_CHARS='[\\/:*?"<>|\r\n\t]'
          RENAMED_FILES=false
          
          # Use 'find' to locate all files and directories, then pipe to a loop
          find . -depth -print0 | while IFS= read -r -d '' filepath; do
            # Skip the .git directory
            if [[ "$filepath" == "./.git"* ]]; then
              continue
            fi

            # Extract the directory and the base filename
            dirname=$(dirname "$filepath")
            basename=$(basename "$filepath")
            
            # Check if the base filename contains any illegal characters
            if [[ "$basename" =~ $ILLEGAL_CHARS ]]; then
              # Sanitize the filename: replace illegal chars with _, squeeze multiple, and trim leading/trailing
              sanitized_basename=$(echo "$basename" | tr '\[\\/:*?"<>|\]' '_' | tr -s '_' | sed 's/^_//;s/_$//')
              
              # Failsafe for names that result in empty strings
              if [[ -z "$sanitized_basename" ]]; then
                  sanitized_basename="renamed_file_$(date +%s)"
              fi

              new_filepath="$dirname/$sanitized_basename"
              
              # Check if a rename is actually necessary
              if [[ "$filepath" != "$new_filepath" ]]; then
                echo "Renaming: '$filepath' -> '$new_filepath'"
                # Use git mv to preserve history
                git mv "$filepath" "$new_filepath"
                RENAMED_FILES=true
              fi
            fi
          done
          
          # Set an output to conditionally run the commit/push steps
          if $RENAMED_FILES; then
            echo "renamed=true" >> $GITHUB_OUTPUT
          else
            echo "renamed=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Configure Git and Commit Changes
        if: steps.rename.outputs.renamed == 'true'
        run: |
          # Use the GitHub Actions bot user for the commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Stage all changes (the git mv operations) and commit
          git add -A
          git commit -m "fix: Automated removal of illegal filename characters"
          
      - name: Push Changes
        if: steps.rename.outputs.renamed == 'true'
        run: |
          # Push the commit to the branch it was checked out on
          # The checkout@v4 step already authenticated the push using GITHUB_TOKEN
          git push
